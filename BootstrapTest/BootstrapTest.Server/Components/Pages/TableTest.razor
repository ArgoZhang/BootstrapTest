@page "/tabletest"
@inject MessageService _MessageService

<Stack >
    <StackItem >
        <Table AutoGenerateColumns TItem="Order" OnQueryAsync="OnQueryAsync" ShowToolbar EditDialogItemsPerRow="1">
            <TableColumns>
                <TableColumn @bind-Field=context.Categories Text="分类">
                    <EditTemplate Context="item">
                        <div class="col-12" >
                        <MultiSelect DisplayText="分类" @bind-Value=context.Categories />
                        </div>
                    </EditTemplate>
                    <Template Context="item" >
                        @string.Join(',',context.Categories)
                    </Template>
                </TableColumn>
                <TableColumn @bind-Field=context.Summary Sortable Text="概要">
                    <Template Context="item">
                        @item.Value.Category
                    </Template>
                    <FilterTemplate>
                        <CustomerFilter />
                    </FilterTemplate>
                </TableColumn>

                <TableColumn @bind-Field=context.Summary.Id Sortable Text="概要主键">
                    <Template Context="item">
                        @item.Value
                    </Template>
                  
                </TableColumn>
            </TableColumns>
        </Table>
    </StackItem>
    <StackItem >
        <Button class="my-10" OnClick="OnClick" IsBlock >显示数据</Button>
    </StackItem>
    <StackItem >
        <EditorForm Model="_order" ItemsPerRow="1" LabelAlign="Alignment.Right" >
            <FieldItems >
                <EditorItem @bind-Field=context.Categories  Text="分类">
                    <EditTemplate Context="item">
                        <MultiSelect DisplayText="分类" @bind-Value=context.Categories />
                    </EditTemplate>
                </EditorItem>
            </FieldItems>
        </EditorForm>
    </StackItem>
</Stack>





@code
{


    void OnClick()
    {
        var str = string.Join(',', _order.Categories);

        _MessageService.Show(new MessageOption(){Content=str, ShowShadow=true});

    }


    Order _order = new Order();

    private Task<QueryData<Order>> OnQueryAsync(QueryPageOptions options)
    {

        var list = new List<Order>()
        {
            new Order()
            {
                Number=2,
                Notes="B",

                Summary=new Summary(){Category=SummaryCategory.Low}

            },
            new Order()
            {
                Number=2,
             Notes="A",
                Summary=new Summary(){Category=SummaryCategory.High}

            },
            new Order()
            {
                Number=1,
               Notes="F",
                Summary=new Summary(){Category=SummaryCategory.Middle}

            },
            new Order()
            {
                Notes="C",
                Number=4,
                Summary=new Summary(){Category=SummaryCategory.Low}

            },
            new Order()
            {

                Number=6,
                 Notes="A",
                Summary=new Summary(){Category=SummaryCategory.High}

            },
        };



        var sorted = false;
        if (!string.IsNullOrEmpty(options.SortName))
        {
            list = list.Sort(options.SortName, options.SortOrder).ToList();
            sorted = true;
        }

        return Task.FromResult(new QueryData<Order>()
            {
                Items = list,
                TotalCount = list.Count,
                IsSorted = sorted,
                IsFiltered=true,

            });
    }

    List<Order> _orders = new List<Order>()
    {
        new Order()
        {
            Number=2,
            Notes="B",

            Summary=new Summary(){Category=SummaryCategory.Low}

        },
        new Order()
        {
            Number=2,
         Notes="A",
            Summary=new Summary(){Category=SummaryCategory.High}

        },
        new Order()
        {
            Number=1,
           Notes="F",
            Summary=new Summary(){Category=SummaryCategory.Middle}

        },
        new Order()
        {
            Notes="C",
            Number=4,
            Summary=new Summary(){Category=SummaryCategory.Low}

        },
        new Order()
        {

            Number=6,
             Notes="A",
            Summary=new Summary(){Category=SummaryCategory.High}

        },
    };

    public class Order
    {
        [AutoGenerateColumn(Ignore =true)]
        public int Id { get; set; }

        [AutoGenerateColumn(Order =10, Text = "编码",Sortable =true)]
        public int Number { get; set; }

        [AutoGenerateColumn(Text = "概要")]
        public Summary  Summary { get; set; }

        [AutoGenerateColumn(Order = 20, Text = "分类", Sortable = true )]
        public List<SummaryCategory> Categories { get; set; }

        [AutoGenerateColumn(Order = 30, Text = "备注", Sortable = true)]
        public string Notes { get; set; }

        public Order()
        {
            Categories = new List<SummaryCategory>();
            Summary = new Summary();
        }

    }


    public enum SummaryCategory
    {
        [Description("低")]
        Low,
        [Description("中")]
        Middle,
        [Description("高")]
        High
    }

    public class Summary : IComparable<Summary>
    {
        [AutoGenerateColumn(Ignore = true)]
        public int Id { get; set; }
        [AutoGenerateColumn(Text = "分类")]
        public SummaryCategory  Category { get; set; }

        public int CompareTo(Summary other)
        {
            return Category.CompareTo(other.Category);
        }
    }

}
